"use strict";// @ts-check
function cov_1dz6qxskve(){var path="C:\\Users\\SandeepUnnikrishnanP\\Documents\\automation-playwright\\playwright.config.js";var hash="266157a6864f8cbd3bcd1bacc006efc319a66432";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\SandeepUnnikrishnanP\\Documents\\automation-playwright\\playwright.config.js",statementMap:{"0":{start:{line:7,column:4},end:{line:7,column:31}},"1":{start:{line:18,column:0},end:{line:82,column:3}}},fnMap:{},branchMap:{"0":{loc:{start:{line:25,column:11},end:{line:25,column:33}},type:"cond-expr",locations:[{start:{line:25,column:28},end:{line:25,column:29}},{start:{line:25,column:32},end:{line:25,column:33}}],line:25},"1":{loc:{start:{line:27,column:11},end:{line:27,column:41}},type:"cond-expr",locations:[{start:{line:27,column:28},end:{line:27,column:29}},{start:{line:27,column:32},end:{line:27,column:41}}],line:27}},s:{"0":0,"1":0},f:{},b:{"0":[0,0],"1":[0,0]},inputSourceMap:{version:3,names:["defineConfig","devices","require","module","exports","testDir","fullyParallel","forbidOnly","process","env","CI","retries","workers","undefined","reporter","use","trace","projects","name"],sources:["playwright.config.js"],sourcesContent:["// @ts-check\r\nconst { defineConfig, devices } = require('@playwright/test');\r\n\r\n/**\r\n * Read environment variables from file.\r\n * https://github.com/motdotla/dotenv\r\n */\r\n// require('dotenv').config();\r\n\r\n/**\r\n * @see https://playwright.dev/docs/test-configuration\r\n */\r\nmodule.exports = defineConfig({\r\n  testDir: './tests',\r\n  /* Run tests in files in parallel */\r\n  fullyParallel: true,\r\n  /* Fail the build on CI if you accidentally left test.only in the source code. */\r\n  forbidOnly: !!process.env.CI,\r\n  /* Retry on CI only */\r\n  retries: process.env.CI ? 2 : 0,\r\n  /* Opt out of parallel tests on CI. */\r\n  workers: process.env.CI ? 1 : undefined,\r\n  /* Reporter to use. See https://playwright.dev/docs/test-reporters */\r\n  reporter: [[\"line\"], [\"allure-playwright\"]],\r\n  /* Shared settings for all the projects below. See https://playwright.dev/docs/api/class-testoptions. */\r\n  use: {\r\n    /* Base URL to use in actions like `await page.goto('/')`. */\r\n    // baseURL: 'http://127.0.0.1:3000',\r\n\r\n    /* Collect trace when retrying the failed test. See https://playwright.dev/docs/trace-viewer */\r\n    trace: 'on-first-retry',\r\n  },\r\n\r\n  /* Configure projects for major browsers */\r\n  projects: [\r\n    {\r\n      name: 'chromium',\r\n      use: { ...devices['Desktop Chrome'] },\r\n    },\r\n    // {\r\n    //   name: \"firefox\",\r\n    //   use: { ...devices[\"Desktop Firefox\"] },\r\n    // }\r\n\r\n    // {\r\n    //   name: 'webkit',\r\n    //   use: { ...devices['Desktop Safari'] },\r\n    // },\r\n\r\n    /* Test against mobile viewports. */\r\n    // {\r\n    //   name: 'Mobile Chrome',\r\n    //   use: { ...devices['Pixel 5'] },\r\n    // },\r\n    // {\r\n    //   name: 'Mobile Safari',\r\n    //   use: { ...devices['iPhone 12'] },\r\n    // },\r\n\r\n    /* Test against branded browsers. */\r\n    // {\r\n    //   name: 'Microsoft Edge',\r\n    //   use: { ...devices['Desktop Edge'], channel: 'msedge' },\r\n    // },\r\n    // {\r\n    //   name: 'Google Chrome',\r\n    //   use: { ...devices['Desktop Chrome'], channel: 'chrome' },\r\n    // },\r\n  ],\r\n\r\n  /* Run your local dev server before starting the tests */\r\n  // webServer: {\r\n  //   command: 'npm run start',\r\n  //   url: 'http://127.0.0.1:3000',\r\n  //   reuseExistingServer: !process.env.CI,\r\n  // },\r\n});\r\n\r\n"],mappings:";;AAAA;AACA,MAAM;EAAEA,YAAY;EAAEC;AAAQ,CAAC,GAAGC,OAAO,CAAC,kBAAkB,CAAC;;AAE7D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACAC,MAAM,CAACC,OAAO,GAAGJ,YAAY,CAAC;EAC5BK,OAAO,EAAE,SAAS;EAClB;EACAC,aAAa,EAAE,IAAI;EACnB;EACAC,UAAU,EAAE,CAAC,CAACC,OAAO,CAACC,GAAG,CAACC,EAAE;EAC5B;EACAC,OAAO,EAAEH,OAAO,CAACC,GAAG,CAACC,EAAE,GAAG,CAAC,GAAG,CAAC;EAC/B;EACAE,OAAO,EAAEJ,OAAO,CAACC,GAAG,CAACC,EAAE,GAAG,CAAC,GAAGG,SAAS;EACvC;EACAC,QAAQ,EAAE,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,mBAAmB,CAAC,CAAC;EAC3C;EACAC,GAAG,EAAE;IACH;IACA;;IAEA;IACAC,KAAK,EAAE;EACT,CAAC;EAED;EACAC,QAAQ,EAAE,CACR;IACEC,IAAI,EAAE,UAAU;IAChBH,GAAG,EAAE;MAAE,GAAGd,OAAO,CAAC,gBAAgB;IAAE;EACtC;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAAA;;EAGF;EACA;EACA;EACA;EACA;EACA;AACF,CAAC,CAAC"},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"266157a6864f8cbd3bcd1bacc006efc319a66432"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1dz6qxskve=function(){return actualCoverage;};}return actualCoverage;}cov_1dz6qxskve();const{defineConfig,devices}=(cov_1dz6qxskve().s[0]++,require('@playwright/test'));/**
 * Read environment variables from file.
 * https://github.com/motdotla/dotenv
 */ // require('dotenv').config();
/**
 * @see https://playwright.dev/docs/test-configuration
 */cov_1dz6qxskve().s[1]++;module.exports=defineConfig({testDir:'./tests',/* Run tests in files in parallel */fullyParallel:true,/* Fail the build on CI if you accidentally left test.only in the source code. */forbidOnly:!!process.env.CI,/* Retry on CI only */retries:process.env.CI?(cov_1dz6qxskve().b[0][0]++,2):(cov_1dz6qxskve().b[0][1]++,0),/* Opt out of parallel tests on CI. */workers:process.env.CI?(cov_1dz6qxskve().b[1][0]++,1):(cov_1dz6qxskve().b[1][1]++,undefined),/* Reporter to use. See https://playwright.dev/docs/test-reporters */reporter:[["line"],["allure-playwright"]],/* Shared settings for all the projects below. See https://playwright.dev/docs/api/class-testoptions. */use:{/* Base URL to use in actions like `await page.goto('/')`. */ // baseURL: 'http://127.0.0.1:3000',
/* Collect trace when retrying the failed test. See https://playwright.dev/docs/trace-viewer */trace:'on-first-retry'},/* Configure projects for major browsers */projects:[{name:'chromium',use:{...devices['Desktop Chrome']}}// {
//   name: "firefox",
//   use: { ...devices["Desktop Firefox"] },
// }
// {
//   name: 'webkit',
//   use: { ...devices['Desktop Safari'] },
// },
/* Test against mobile viewports. */ // {
//   name: 'Mobile Chrome',
//   use: { ...devices['Pixel 5'] },
// },
// {
//   name: 'Mobile Safari',
//   use: { ...devices['iPhone 12'] },
// },
/* Test against branded browsers. */ // {
//   name: 'Microsoft Edge',
//   use: { ...devices['Desktop Edge'], channel: 'msedge' },
// },
// {
//   name: 'Google Chrome',
//   use: { ...devices['Desktop Chrome'], channel: 'chrome' },
// },
]/* Run your local dev server before starting the tests */ // webServer: {
//   command: 'npm run start',
//   url: 'http://127.0.0.1:3000',
//   reuseExistingServer: !process.env.CI,
// },
});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZWZpbmVDb25maWciLCJkZXZpY2VzIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0ZXN0RGlyIiwiZnVsbHlQYXJhbGxlbCIsImZvcmJpZE9ubHkiLCJwcm9jZXNzIiwiZW52IiwiQ0kiLCJyZXRyaWVzIiwid29ya2VycyIsInVuZGVmaW5lZCIsInJlcG9ydGVyIiwidXNlIiwidHJhY2UiLCJwcm9qZWN0cyIsIm5hbWUiXSwic291cmNlcyI6WyJwbGF5d3JpZ2h0LmNvbmZpZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAdHMtY2hlY2tcclxuY29uc3QgeyBkZWZpbmVDb25maWcsIGRldmljZXMgfSA9IHJlcXVpcmUoJ0BwbGF5d3JpZ2h0L3Rlc3QnKTtcclxuXHJcbi8qKlxyXG4gKiBSZWFkIGVudmlyb25tZW50IHZhcmlhYmxlcyBmcm9tIGZpbGUuXHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3Rkb3RsYS9kb3RlbnZcclxuICovXHJcbi8vIHJlcXVpcmUoJ2RvdGVudicpLmNvbmZpZygpO1xyXG5cclxuLyoqXHJcbiAqIEBzZWUgaHR0cHM6Ly9wbGF5d3JpZ2h0LmRldi9kb2NzL3Rlc3QtY29uZmlndXJhdGlvblxyXG4gKi9cclxubW9kdWxlLmV4cG9ydHMgPSBkZWZpbmVDb25maWcoe1xyXG4gIHRlc3REaXI6ICcuL3Rlc3RzJyxcclxuICAvKiBSdW4gdGVzdHMgaW4gZmlsZXMgaW4gcGFyYWxsZWwgKi9cclxuICBmdWxseVBhcmFsbGVsOiB0cnVlLFxyXG4gIC8qIEZhaWwgdGhlIGJ1aWxkIG9uIENJIGlmIHlvdSBhY2NpZGVudGFsbHkgbGVmdCB0ZXN0Lm9ubHkgaW4gdGhlIHNvdXJjZSBjb2RlLiAqL1xyXG4gIGZvcmJpZE9ubHk6ICEhcHJvY2Vzcy5lbnYuQ0ksXHJcbiAgLyogUmV0cnkgb24gQ0kgb25seSAqL1xyXG4gIHJldHJpZXM6IHByb2Nlc3MuZW52LkNJID8gMiA6IDAsXHJcbiAgLyogT3B0IG91dCBvZiBwYXJhbGxlbCB0ZXN0cyBvbiBDSS4gKi9cclxuICB3b3JrZXJzOiBwcm9jZXNzLmVudi5DSSA/IDEgOiB1bmRlZmluZWQsXHJcbiAgLyogUmVwb3J0ZXIgdG8gdXNlLiBTZWUgaHR0cHM6Ly9wbGF5d3JpZ2h0LmRldi9kb2NzL3Rlc3QtcmVwb3J0ZXJzICovXHJcbiAgcmVwb3J0ZXI6IFtbXCJsaW5lXCJdLCBbXCJhbGx1cmUtcGxheXdyaWdodFwiXV0sXHJcbiAgLyogU2hhcmVkIHNldHRpbmdzIGZvciBhbGwgdGhlIHByb2plY3RzIGJlbG93LiBTZWUgaHR0cHM6Ly9wbGF5d3JpZ2h0LmRldi9kb2NzL2FwaS9jbGFzcy10ZXN0b3B0aW9ucy4gKi9cclxuICB1c2U6IHtcclxuICAgIC8qIEJhc2UgVVJMIHRvIHVzZSBpbiBhY3Rpb25zIGxpa2UgYGF3YWl0IHBhZ2UuZ290bygnLycpYC4gKi9cclxuICAgIC8vIGJhc2VVUkw6ICdodHRwOi8vMTI3LjAuMC4xOjMwMDAnLFxyXG5cclxuICAgIC8qIENvbGxlY3QgdHJhY2Ugd2hlbiByZXRyeWluZyB0aGUgZmFpbGVkIHRlc3QuIFNlZSBodHRwczovL3BsYXl3cmlnaHQuZGV2L2RvY3MvdHJhY2Utdmlld2VyICovXHJcbiAgICB0cmFjZTogJ29uLWZpcnN0LXJldHJ5JyxcclxuICB9LFxyXG5cclxuICAvKiBDb25maWd1cmUgcHJvamVjdHMgZm9yIG1ham9yIGJyb3dzZXJzICovXHJcbiAgcHJvamVjdHM6IFtcclxuICAgIHtcclxuICAgICAgbmFtZTogJ2Nocm9taXVtJyxcclxuICAgICAgdXNlOiB7IC4uLmRldmljZXNbJ0Rlc2t0b3AgQ2hyb21lJ10gfSxcclxuICAgIH0sXHJcbiAgICAvLyB7XHJcbiAgICAvLyAgIG5hbWU6IFwiZmlyZWZveFwiLFxyXG4gICAgLy8gICB1c2U6IHsgLi4uZGV2aWNlc1tcIkRlc2t0b3AgRmlyZWZveFwiXSB9LFxyXG4gICAgLy8gfVxyXG5cclxuICAgIC8vIHtcclxuICAgIC8vICAgbmFtZTogJ3dlYmtpdCcsXHJcbiAgICAvLyAgIHVzZTogeyAuLi5kZXZpY2VzWydEZXNrdG9wIFNhZmFyaSddIH0sXHJcbiAgICAvLyB9LFxyXG5cclxuICAgIC8qIFRlc3QgYWdhaW5zdCBtb2JpbGUgdmlld3BvcnRzLiAqL1xyXG4gICAgLy8ge1xyXG4gICAgLy8gICBuYW1lOiAnTW9iaWxlIENocm9tZScsXHJcbiAgICAvLyAgIHVzZTogeyAuLi5kZXZpY2VzWydQaXhlbCA1J10gfSxcclxuICAgIC8vIH0sXHJcbiAgICAvLyB7XHJcbiAgICAvLyAgIG5hbWU6ICdNb2JpbGUgU2FmYXJpJyxcclxuICAgIC8vICAgdXNlOiB7IC4uLmRldmljZXNbJ2lQaG9uZSAxMiddIH0sXHJcbiAgICAvLyB9LFxyXG5cclxuICAgIC8qIFRlc3QgYWdhaW5zdCBicmFuZGVkIGJyb3dzZXJzLiAqL1xyXG4gICAgLy8ge1xyXG4gICAgLy8gICBuYW1lOiAnTWljcm9zb2Z0IEVkZ2UnLFxyXG4gICAgLy8gICB1c2U6IHsgLi4uZGV2aWNlc1snRGVza3RvcCBFZGdlJ10sIGNoYW5uZWw6ICdtc2VkZ2UnIH0sXHJcbiAgICAvLyB9LFxyXG4gICAgLy8ge1xyXG4gICAgLy8gICBuYW1lOiAnR29vZ2xlIENocm9tZScsXHJcbiAgICAvLyAgIHVzZTogeyAuLi5kZXZpY2VzWydEZXNrdG9wIENocm9tZSddLCBjaGFubmVsOiAnY2hyb21lJyB9LFxyXG4gICAgLy8gfSxcclxuICBdLFxyXG5cclxuICAvKiBSdW4geW91ciBsb2NhbCBkZXYgc2VydmVyIGJlZm9yZSBzdGFydGluZyB0aGUgdGVzdHMgKi9cclxuICAvLyB3ZWJTZXJ2ZXI6IHtcclxuICAvLyAgIGNvbW1hbmQ6ICducG0gcnVuIHN0YXJ0JyxcclxuICAvLyAgIHVybDogJ2h0dHA6Ly8xMjcuMC4wLjE6MzAwMCcsXHJcbiAgLy8gICByZXVzZUV4aXN0aW5nU2VydmVyOiAhcHJvY2Vzcy5lbnYuQ0ksXHJcbiAgLy8gfSxcclxufSk7XHJcblxyXG4iXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQSxNQUFNO0VBQUVBLFlBQVk7RUFBRUM7QUFBUSxDQUFDLEdBQUdDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQzs7QUFFN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQUMsTUFBTSxDQUFDQyxPQUFPLEdBQUdKLFlBQVksQ0FBQztFQUM1QkssT0FBTyxFQUFFLFNBQVM7RUFDbEI7RUFDQUMsYUFBYSxFQUFFLElBQUk7RUFDbkI7RUFDQUMsVUFBVSxFQUFFLENBQUMsQ0FBQ0MsT0FBTyxDQUFDQyxHQUFHLENBQUNDLEVBQUU7RUFDNUI7RUFDQUMsT0FBTyxFQUFFSCxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDO0VBQy9CO0VBQ0FFLE9BQU8sRUFBRUosT0FBTyxDQUFDQyxHQUFHLENBQUNDLEVBQUUsR0FBRyxDQUFDLEdBQUdHLFNBQVM7RUFDdkM7RUFDQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLG1CQUFtQixDQUFDLENBQUM7RUFDM0M7RUFDQUMsR0FBRyxFQUFFO0lBQ0g7SUFDQTs7SUFFQTtJQUNBQyxLQUFLLEVBQUU7RUFDVCxDQUFDO0VBRUQ7RUFDQUMsUUFBUSxFQUFFLENBQ1I7SUFDRUMsSUFBSSxFQUFFLFVBQVU7SUFDaEJILEdBQUcsRUFBRTtNQUFFLEdBQUdkLE9BQU8sQ0FBQyxnQkFBZ0I7SUFBRTtFQUN0QztFQUNBO0VBQ0E7RUFDQTtFQUNBOztFQUVBO0VBQ0E7RUFDQTtFQUNBOztFQUVBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTs7RUFFQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFBQTs7RUFHRjtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7QUFDRixDQUFDLENBQUMifQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMWR6NnF4c2t2ZSIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJlbmQiLCJmbk1hcCIsImJyYW5jaE1hcCIsImxvYyIsInR5cGUiLCJsb2NhdGlvbnMiLCJzIiwiZiIsImIiLCJpbnB1dFNvdXJjZU1hcCIsInZlcnNpb24iLCJuYW1lcyIsInNvdXJjZXMiLCJzb3VyY2VzQ29udGVudCIsIm1hcHBpbmdzIiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSIsImRlZmluZUNvbmZpZyIsImRldmljZXMiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsInRlc3REaXIiLCJmdWxseVBhcmFsbGVsIiwiZm9yYmlkT25seSIsInByb2Nlc3MiLCJlbnYiLCJDSSIsInJldHJpZXMiLCJ3b3JrZXJzIiwidW5kZWZpbmVkIiwicmVwb3J0ZXIiLCJ1c2UiLCJ0cmFjZSIsInByb2plY3RzIiwibmFtZSJdLCJzb3VyY2VzIjpbInBsYXl3cmlnaHQuY29uZmlnLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEB0cy1jaGVja1xyXG5jb25zdCB7IGRlZmluZUNvbmZpZywgZGV2aWNlcyB9ID0gcmVxdWlyZSgnQHBsYXl3cmlnaHQvdGVzdCcpO1xyXG5cclxuLyoqXHJcbiAqIFJlYWQgZW52aXJvbm1lbnQgdmFyaWFibGVzIGZyb20gZmlsZS5cclxuICogaHR0cHM6Ly9naXRodWIuY29tL21vdGRvdGxhL2RvdGVudlxyXG4gKi9cclxuLy8gcmVxdWlyZSgnZG90ZW52JykuY29uZmlnKCk7XHJcblxyXG4vKipcclxuICogQHNlZSBodHRwczovL3BsYXl3cmlnaHQuZGV2L2RvY3MvdGVzdC1jb25maWd1cmF0aW9uXHJcbiAqL1xyXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmluZUNvbmZpZyh7XHJcbiAgdGVzdERpcjogJy4vdGVzdHMnLFxyXG4gIC8qIFJ1biB0ZXN0cyBpbiBmaWxlcyBpbiBwYXJhbGxlbCAqL1xyXG4gIGZ1bGx5UGFyYWxsZWw6IHRydWUsXHJcbiAgLyogRmFpbCB0aGUgYnVpbGQgb24gQ0kgaWYgeW91IGFjY2lkZW50YWxseSBsZWZ0IHRlc3Qub25seSBpbiB0aGUgc291cmNlIGNvZGUuICovXHJcbiAgZm9yYmlkT25seTogISFwcm9jZXNzLmVudi5DSSxcclxuICAvKiBSZXRyeSBvbiBDSSBvbmx5ICovXHJcbiAgcmV0cmllczogcHJvY2Vzcy5lbnYuQ0kgPyAyIDogMCxcclxuICAvKiBPcHQgb3V0IG9mIHBhcmFsbGVsIHRlc3RzIG9uIENJLiAqL1xyXG4gIHdvcmtlcnM6IHByb2Nlc3MuZW52LkNJID8gMSA6IHVuZGVmaW5lZCxcclxuICAvKiBSZXBvcnRlciB0byB1c2UuIFNlZSBodHRwczovL3BsYXl3cmlnaHQuZGV2L2RvY3MvdGVzdC1yZXBvcnRlcnMgKi9cclxuICByZXBvcnRlcjogW1tcImxpbmVcIl0sIFtcImFsbHVyZS1wbGF5d3JpZ2h0XCJdXSxcclxuICAvKiBTaGFyZWQgc2V0dGluZ3MgZm9yIGFsbCB0aGUgcHJvamVjdHMgYmVsb3cuIFNlZSBodHRwczovL3BsYXl3cmlnaHQuZGV2L2RvY3MvYXBpL2NsYXNzLXRlc3RvcHRpb25zLiAqL1xyXG4gIHVzZToge1xyXG4gICAgLyogQmFzZSBVUkwgdG8gdXNlIGluIGFjdGlvbnMgbGlrZSBgYXdhaXQgcGFnZS5nb3RvKCcvJylgLiAqL1xyXG4gICAgLy8gYmFzZVVSTDogJ2h0dHA6Ly8xMjcuMC4wLjE6MzAwMCcsXHJcblxyXG4gICAgLyogQ29sbGVjdCB0cmFjZSB3aGVuIHJldHJ5aW5nIHRoZSBmYWlsZWQgdGVzdC4gU2VlIGh0dHBzOi8vcGxheXdyaWdodC5kZXYvZG9jcy90cmFjZS12aWV3ZXIgKi9cclxuICAgIHRyYWNlOiAnb24tZmlyc3QtcmV0cnknLFxyXG4gIH0sXHJcblxyXG4gIC8qIENvbmZpZ3VyZSBwcm9qZWN0cyBmb3IgbWFqb3IgYnJvd3NlcnMgKi9cclxuICBwcm9qZWN0czogW1xyXG4gICAge1xyXG4gICAgICBuYW1lOiAnY2hyb21pdW0nLFxyXG4gICAgICB1c2U6IHsgLi4uZGV2aWNlc1snRGVza3RvcCBDaHJvbWUnXSB9LFxyXG4gICAgfSxcclxuICAgIC8vIHtcclxuICAgIC8vICAgbmFtZTogXCJmaXJlZm94XCIsXHJcbiAgICAvLyAgIHVzZTogeyAuLi5kZXZpY2VzW1wiRGVza3RvcCBGaXJlZm94XCJdIH0sXHJcbiAgICAvLyB9XHJcblxyXG4gICAgLy8ge1xyXG4gICAgLy8gICBuYW1lOiAnd2Via2l0JyxcclxuICAgIC8vICAgdXNlOiB7IC4uLmRldmljZXNbJ0Rlc2t0b3AgU2FmYXJpJ10gfSxcclxuICAgIC8vIH0sXHJcblxyXG4gICAgLyogVGVzdCBhZ2FpbnN0IG1vYmlsZSB2aWV3cG9ydHMuICovXHJcbiAgICAvLyB7XHJcbiAgICAvLyAgIG5hbWU6ICdNb2JpbGUgQ2hyb21lJyxcclxuICAgIC8vICAgdXNlOiB7IC4uLmRldmljZXNbJ1BpeGVsIDUnXSB9LFxyXG4gICAgLy8gfSxcclxuICAgIC8vIHtcclxuICAgIC8vICAgbmFtZTogJ01vYmlsZSBTYWZhcmknLFxyXG4gICAgLy8gICB1c2U6IHsgLi4uZGV2aWNlc1snaVBob25lIDEyJ10gfSxcclxuICAgIC8vIH0sXHJcblxyXG4gICAgLyogVGVzdCBhZ2FpbnN0IGJyYW5kZWQgYnJvd3NlcnMuICovXHJcbiAgICAvLyB7XHJcbiAgICAvLyAgIG5hbWU6ICdNaWNyb3NvZnQgRWRnZScsXHJcbiAgICAvLyAgIHVzZTogeyAuLi5kZXZpY2VzWydEZXNrdG9wIEVkZ2UnXSwgY2hhbm5lbDogJ21zZWRnZScgfSxcclxuICAgIC8vIH0sXHJcbiAgICAvLyB7XHJcbiAgICAvLyAgIG5hbWU6ICdHb29nbGUgQ2hyb21lJyxcclxuICAgIC8vICAgdXNlOiB7IC4uLmRldmljZXNbJ0Rlc2t0b3AgQ2hyb21lJ10sIGNoYW5uZWw6ICdjaHJvbWUnIH0sXHJcbiAgICAvLyB9LFxyXG4gIF0sXHJcblxyXG4gIC8qIFJ1biB5b3VyIGxvY2FsIGRldiBzZXJ2ZXIgYmVmb3JlIHN0YXJ0aW5nIHRoZSB0ZXN0cyAqL1xyXG4gIC8vIHdlYlNlcnZlcjoge1xyXG4gIC8vICAgY29tbWFuZDogJ25wbSBydW4gc3RhcnQnLFxyXG4gIC8vICAgdXJsOiAnaHR0cDovLzEyNy4wLjAuMTozMDAwJyxcclxuICAvLyAgIHJldXNlRXhpc3RpbmdTZXJ2ZXI6ICFwcm9jZXNzLmVudi5DSSxcclxuICAvLyB9LFxyXG59KTtcclxuXHJcbiJdLCJtYXBwaW5ncyI6ImFBQUE7QUFBQSxTQUFBQSxlQUFBLE1BQUFDLElBQUEsK0ZBQUFDLElBQUEsZ0RBQUFDLE1BQUEsS0FBQUMsUUFBQSxzQkFBQUMsR0FBQSxvQkFBQUMsWUFBQSxFQUFBTCxJQUFBLDJGQUFBTSxZQUFBLE9BQUFDLEtBQUEsRUFBQUMsSUFBQSxHQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxHQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLE1BQUFFLEtBQUEsSUFBQUMsU0FBQSxPQUFBQyxHQUFBLEVBQUFOLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLE1BQUFLLElBQUEsYUFBQUMsU0FBQSxHQUFBUixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxLQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxPQUFBRixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxLQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxPQUFBRCxJQUFBLFVBQUFLLEdBQUEsRUFBQU4sS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsS0FBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsTUFBQUssSUFBQSxhQUFBQyxTQUFBLEdBQUFSLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLE9BQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLE9BQUFELElBQUEsTUFBQVEsQ0FBQSxlQUFBQyxDQUFBLElBQUFDLENBQUEsdUJBQUFDLGNBQUEsRUFBQUMsT0FBQSxHQUFBQyxLQUFBLGdNQUFBQyxPQUFBLDBCQUFBQyxjQUFBLHMyRUFBQUMsUUFBQSwyekJBQUFDLGVBQUEsNENBQUF4QixJQUFBLGlEQUFBeUIsUUFBQSxDQUFBeEIsTUFBQSxDQUFBRSxHQUFBLElBQUFGLE1BQUEsQ0FBQUUsR0FBQSxVQUFBc0IsUUFBQSxDQUFBMUIsSUFBQSxHQUFBMEIsUUFBQSxDQUFBMUIsSUFBQSxFQUFBQyxJQUFBLEdBQUFBLElBQUEsRUFBQXlCLFFBQUEsQ0FBQTFCLElBQUEsRUFBQUssWUFBQSxNQUFBc0IsY0FBQSxDQUFBRCxRQUFBLENBQUExQixJQUFBLEdBVUE7QUFBQUQsY0FBQSxTQUFBQSxDQUFBLFNBQUE0QixjQUFBLFdBQUFBLGNBQUEsRUFBQTVCLGNBQUEsR0FUQSxLQUFNLENBQUU2QixZQUFZLENBQUVDLE9BQVEsQ0FBQyxFQUFBOUIsY0FBQSxHQUFBaUIsQ0FBQSxNQUFHYyxPQUFPLENBQUMsa0JBQWtCLENBQUMsRUFFN0Q7QUFDQTtBQUNBO0FBQ0EsR0FIQSxDQUlBO0FBRUE7QUFDQTtBQUNBLEdBRkEvQixjQUFBLEdBQUFpQixDQUFBLE1BR0FlLE1BQU0sQ0FBQ0MsT0FBTyxDQUFHSixZQUFZLENBQUMsQ0FDNUJLLE9BQU8sQ0FBRSxTQUFTLENBQ2xCLG9DQUNBQyxhQUFhLENBQUUsSUFBSSxDQUNuQixpRkFDQUMsVUFBVSxDQUFFLENBQUMsQ0FBQ0MsT0FBTyxDQUFDQyxHQUFHLENBQUNDLEVBQUUsQ0FDNUIsc0JBQ0FDLE9BQU8sQ0FBRUgsT0FBTyxDQUFDQyxHQUFHLENBQUNDLEVBQUUsRUFBQXZDLGNBQUEsR0FBQW1CLENBQUEsU0FBRyxDQUFDLEdBQUFuQixjQUFBLEdBQUFtQixDQUFBLFNBQUcsQ0FBQyxFQUMvQixzQ0FDQXNCLE9BQU8sQ0FBRUosT0FBTyxDQUFDQyxHQUFHLENBQUNDLEVBQUUsRUFBQXZDLGNBQUEsR0FBQW1CLENBQUEsU0FBRyxDQUFDLEdBQUFuQixjQUFBLEdBQUFtQixDQUFBLFNBQUd1QixTQUFTLEVBQ3ZDLHFFQUNBQyxRQUFRLENBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFFLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUMzQyx3R0FDQUMsR0FBRyxDQUFFLENBQ0gsOERBQ0E7QUFFQSwrRkFDQUMsS0FBSyxDQUFFLGdCQUNULENBQUMsQ0FFRCwyQ0FDQUMsUUFBUSxDQUFFLENBQ1IsQ0FDRUMsSUFBSSxDQUFFLFVBQVUsQ0FDaEJILEdBQUcsQ0FBRSxDQUFFLEdBQUdkLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBRSxDQUN0QyxDQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQSxxQ0FDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEscUNBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBLENBR0YsMERBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNGLENBQUMsQ0FBQyxDIn0=