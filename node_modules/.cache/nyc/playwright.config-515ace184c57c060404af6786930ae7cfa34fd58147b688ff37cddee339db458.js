"use strict";// @ts-check
function cov_2brjq61fwq(){var path="C:\\Users\\AkhileshShukla\\OneDrive - Anthology Inc\\Desktop\\Anthology\\POC\\Playwright-Test-Demo\\playwright.config.js";var hash="36bc4dd97a579d975487d09fc2da22a8895603af";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\AkhileshShukla\\OneDrive - Anthology Inc\\Desktop\\Anthology\\POC\\Playwright-Test-Demo\\playwright.config.js",statementMap:{"0":{start:{line:7,column:4},end:{line:7,column:31}},"1":{start:{line:18,column:0},end:{line:83,column:3}}},fnMap:{},branchMap:{"0":{loc:{start:{line:25,column:11},end:{line:25,column:33}},type:"cond-expr",locations:[{start:{line:25,column:28},end:{line:25,column:29}},{start:{line:25,column:32},end:{line:25,column:33}}],line:25},"1":{loc:{start:{line:27,column:11},end:{line:27,column:41}},type:"cond-expr",locations:[{start:{line:27,column:28},end:{line:27,column:29}},{start:{line:27,column:32},end:{line:27,column:41}}],line:27}},s:{"0":0,"1":0},f:{},b:{"0":[0,0],"1":[0,0]},inputSourceMap:{version:3,names:["defineConfig","devices","require","module","exports","testDir","fullyParallel","forbidOnly","process","env","CI","retries","workers","undefined","reporter","use","trace","projects","name","acceptDownloads"],sources:["playwright.config.js"],sourcesContent:["// @ts-check\nconst { defineConfig, devices } = require('@playwright/test');\n\n/**\n * Read environment variables from file.\n * https://github.com/motdotla/dotenv\n */\n// require('dotenv').config();\n\n/**\n * @see https://playwright.dev/docs/test-configuration\n */\nmodule.exports = defineConfig({\n  testDir: './tests',\n  /* Run tests in files in parallel */\n  fullyParallel: true,\n  /* Fail the build on CI if you accidentally left test.only in the source code. */\n  forbidOnly: !!process.env.CI,\n  /* Retry on CI only */\n  retries: process.env.CI ? 2 : 0,\n  /* Opt out of parallel tests on CI. */\n  workers: process.env.CI ? 1 : undefined,\n  /* Reporter to use. See https://playwright.dev/docs/test-reporters */\n  reporter: [[\"line\"], [\"allure-playwright\"]],\n  /* Shared settings for all the projects below. See https://playwright.dev/docs/api/class-testoptions. */\n  use: {\n    /* Base URL to use in actions like `await page.goto('/')`. */\n    // baseURL: 'http://127.0.0.1:3000',\n\n    /* Collect trace when retrying the failed test. See https://playwright.dev/docs/trace-viewer */\n    trace: 'on-first-retry',\n\n  },\n\n  /* Configure projects for major browsers */\n  projects: [\n    {\n      name: 'chrome',\n      use: {...devices['Desktop Chrome'],acceptDownloads: true },\n    },\n    // {\n    //   name: \"firefox\",\n    //   use: { ...devices[\"Desktop Firefox\"] },\n    // }\n\n    // {\n    //   name: 'webkit',\n    //   use: { ...devices['Desktop Safari'] },\n    // },\n\n    /* Test against mobile viewports. */\n    // {\n    //   name: 'Mobile Chrome',\n    //   use: { ...devices['Pixel 5'] },\n    // },\n    // {\n    //   name: 'Mobile Safari',\n    //   use: { ...devices['iPhone 12'] },\n    // },\n\n    /* Test against branded browsers. */\n    // {\n    //   name: 'Microsoft Edge',\n    //   use: { ...devices['Desktop Edge'], channel: 'msedge' },\n    // },\n    // {\n    //   name: 'Google Chrome',\n    //   use: { ...devices['Desktop Chrome'], channel: 'chrome' },\n    // },\n  ],\n\n  /* Run your local dev server before starting the tests */\n  // webServer: {\n  //   command: 'npm run start',\n  //   url: 'http://127.0.0.1:3000',\n  //   reuseExistingServer: !process.env.CI,\n  // },\n});\n\n"],mappings:";;AAAA;AACA,MAAM;EAAEA,YAAY;EAAEC;AAAQ,CAAC,GAAGC,OAAO,CAAC,kBAAkB,CAAC;;AAE7D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACAC,MAAM,CAACC,OAAO,GAAGJ,YAAY,CAAC;EAC5BK,OAAO,EAAE,SAAS;EAClB;EACAC,aAAa,EAAE,IAAI;EACnB;EACAC,UAAU,EAAE,CAAC,CAACC,OAAO,CAACC,GAAG,CAACC,EAAE;EAC5B;EACAC,OAAO,EAAEH,OAAO,CAACC,GAAG,CAACC,EAAE,GAAG,CAAC,GAAG,CAAC;EAC/B;EACAE,OAAO,EAAEJ,OAAO,CAACC,GAAG,CAACC,EAAE,GAAG,CAAC,GAAGG,SAAS;EACvC;EACAC,QAAQ,EAAE,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,mBAAmB,CAAC,CAAC;EAC3C;EACAC,GAAG,EAAE;IACH;IACA;;IAEA;IACAC,KAAK,EAAE;EAET,CAAC;EAED;EACAC,QAAQ,EAAE,CACR;IACEC,IAAI,EAAE,QAAQ;IACdH,GAAG,EAAE;MAAC,GAAGd,OAAO,CAAC,gBAAgB,CAAC;MAACkB,eAAe,EAAE;IAAK;EAC3D;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAAA;;EAGF;EACA;EACA;EACA;EACA;EACA;AACF,CAAC,CAAC"},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"36bc4dd97a579d975487d09fc2da22a8895603af"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2brjq61fwq=function(){return actualCoverage;};}return actualCoverage;}cov_2brjq61fwq();const{defineConfig,devices}=(cov_2brjq61fwq().s[0]++,require('@playwright/test'));/**
 * Read environment variables from file.
 * https://github.com/motdotla/dotenv
 */ // require('dotenv').config();
/**
 * @see https://playwright.dev/docs/test-configuration
 */cov_2brjq61fwq().s[1]++;module.exports=defineConfig({testDir:'./tests',/* Run tests in files in parallel */fullyParallel:true,/* Fail the build on CI if you accidentally left test.only in the source code. */forbidOnly:!!process.env.CI,/* Retry on CI only */retries:process.env.CI?(cov_2brjq61fwq().b[0][0]++,2):(cov_2brjq61fwq().b[0][1]++,0),/* Opt out of parallel tests on CI. */workers:process.env.CI?(cov_2brjq61fwq().b[1][0]++,1):(cov_2brjq61fwq().b[1][1]++,undefined),/* Reporter to use. See https://playwright.dev/docs/test-reporters */reporter:[["line"],["allure-playwright"]],/* Shared settings for all the projects below. See https://playwright.dev/docs/api/class-testoptions. */use:{/* Base URL to use in actions like `await page.goto('/')`. */ // baseURL: 'http://127.0.0.1:3000',
/* Collect trace when retrying the failed test. See https://playwright.dev/docs/trace-viewer */trace:'on-first-retry'},/* Configure projects for major browsers */projects:[{name:'chrome',use:{...devices['Desktop Chrome'],acceptDownloads:true}}// {
//   name: "firefox",
//   use: { ...devices["Desktop Firefox"] },
// }
// {
//   name: 'webkit',
//   use: { ...devices['Desktop Safari'] },
// },
/* Test against mobile viewports. */ // {
//   name: 'Mobile Chrome',
//   use: { ...devices['Pixel 5'] },
// },
// {
//   name: 'Mobile Safari',
//   use: { ...devices['iPhone 12'] },
// },
/* Test against branded browsers. */ // {
//   name: 'Microsoft Edge',
//   use: { ...devices['Desktop Edge'], channel: 'msedge' },
// },
// {
//   name: 'Google Chrome',
//   use: { ...devices['Desktop Chrome'], channel: 'chrome' },
// },
]/* Run your local dev server before starting the tests */ // webServer: {
//   command: 'npm run start',
//   url: 'http://127.0.0.1:3000',
//   reuseExistingServer: !process.env.CI,
// },
});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZWZpbmVDb25maWciLCJkZXZpY2VzIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0ZXN0RGlyIiwiZnVsbHlQYXJhbGxlbCIsImZvcmJpZE9ubHkiLCJwcm9jZXNzIiwiZW52IiwiQ0kiLCJyZXRyaWVzIiwid29ya2VycyIsInVuZGVmaW5lZCIsInJlcG9ydGVyIiwidXNlIiwidHJhY2UiLCJwcm9qZWN0cyIsIm5hbWUiLCJhY2NlcHREb3dubG9hZHMiXSwic291cmNlcyI6WyJwbGF5d3JpZ2h0LmNvbmZpZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAdHMtY2hlY2tcbmNvbnN0IHsgZGVmaW5lQ29uZmlnLCBkZXZpY2VzIH0gPSByZXF1aXJlKCdAcGxheXdyaWdodC90ZXN0Jyk7XG5cbi8qKlxuICogUmVhZCBlbnZpcm9ubWVudCB2YXJpYWJsZXMgZnJvbSBmaWxlLlxuICogaHR0cHM6Ly9naXRodWIuY29tL21vdGRvdGxhL2RvdGVudlxuICovXG4vLyByZXF1aXJlKCdkb3RlbnYnKS5jb25maWcoKTtcblxuLyoqXG4gKiBAc2VlIGh0dHBzOi8vcGxheXdyaWdodC5kZXYvZG9jcy90ZXN0LWNvbmZpZ3VyYXRpb25cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBkZWZpbmVDb25maWcoe1xuICB0ZXN0RGlyOiAnLi90ZXN0cycsXG4gIC8qIFJ1biB0ZXN0cyBpbiBmaWxlcyBpbiBwYXJhbGxlbCAqL1xuICBmdWxseVBhcmFsbGVsOiB0cnVlLFxuICAvKiBGYWlsIHRoZSBidWlsZCBvbiBDSSBpZiB5b3UgYWNjaWRlbnRhbGx5IGxlZnQgdGVzdC5vbmx5IGluIHRoZSBzb3VyY2UgY29kZS4gKi9cbiAgZm9yYmlkT25seTogISFwcm9jZXNzLmVudi5DSSxcbiAgLyogUmV0cnkgb24gQ0kgb25seSAqL1xuICByZXRyaWVzOiBwcm9jZXNzLmVudi5DSSA/IDIgOiAwLFxuICAvKiBPcHQgb3V0IG9mIHBhcmFsbGVsIHRlc3RzIG9uIENJLiAqL1xuICB3b3JrZXJzOiBwcm9jZXNzLmVudi5DSSA/IDEgOiB1bmRlZmluZWQsXG4gIC8qIFJlcG9ydGVyIHRvIHVzZS4gU2VlIGh0dHBzOi8vcGxheXdyaWdodC5kZXYvZG9jcy90ZXN0LXJlcG9ydGVycyAqL1xuICByZXBvcnRlcjogW1tcImxpbmVcIl0sIFtcImFsbHVyZS1wbGF5d3JpZ2h0XCJdXSxcbiAgLyogU2hhcmVkIHNldHRpbmdzIGZvciBhbGwgdGhlIHByb2plY3RzIGJlbG93LiBTZWUgaHR0cHM6Ly9wbGF5d3JpZ2h0LmRldi9kb2NzL2FwaS9jbGFzcy10ZXN0b3B0aW9ucy4gKi9cbiAgdXNlOiB7XG4gICAgLyogQmFzZSBVUkwgdG8gdXNlIGluIGFjdGlvbnMgbGlrZSBgYXdhaXQgcGFnZS5nb3RvKCcvJylgLiAqL1xuICAgIC8vIGJhc2VVUkw6ICdodHRwOi8vMTI3LjAuMC4xOjMwMDAnLFxuXG4gICAgLyogQ29sbGVjdCB0cmFjZSB3aGVuIHJldHJ5aW5nIHRoZSBmYWlsZWQgdGVzdC4gU2VlIGh0dHBzOi8vcGxheXdyaWdodC5kZXYvZG9jcy90cmFjZS12aWV3ZXIgKi9cbiAgICB0cmFjZTogJ29uLWZpcnN0LXJldHJ5JyxcblxuICB9LFxuXG4gIC8qIENvbmZpZ3VyZSBwcm9qZWN0cyBmb3IgbWFqb3IgYnJvd3NlcnMgKi9cbiAgcHJvamVjdHM6IFtcbiAgICB7XG4gICAgICBuYW1lOiAnY2hyb21lJyxcbiAgICAgIHVzZTogey4uLmRldmljZXNbJ0Rlc2t0b3AgQ2hyb21lJ10sYWNjZXB0RG93bmxvYWRzOiB0cnVlIH0sXG4gICAgfSxcbiAgICAvLyB7XG4gICAgLy8gICBuYW1lOiBcImZpcmVmb3hcIixcbiAgICAvLyAgIHVzZTogeyAuLi5kZXZpY2VzW1wiRGVza3RvcCBGaXJlZm94XCJdIH0sXG4gICAgLy8gfVxuXG4gICAgLy8ge1xuICAgIC8vICAgbmFtZTogJ3dlYmtpdCcsXG4gICAgLy8gICB1c2U6IHsgLi4uZGV2aWNlc1snRGVza3RvcCBTYWZhcmknXSB9LFxuICAgIC8vIH0sXG5cbiAgICAvKiBUZXN0IGFnYWluc3QgbW9iaWxlIHZpZXdwb3J0cy4gKi9cbiAgICAvLyB7XG4gICAgLy8gICBuYW1lOiAnTW9iaWxlIENocm9tZScsXG4gICAgLy8gICB1c2U6IHsgLi4uZGV2aWNlc1snUGl4ZWwgNSddIH0sXG4gICAgLy8gfSxcbiAgICAvLyB7XG4gICAgLy8gICBuYW1lOiAnTW9iaWxlIFNhZmFyaScsXG4gICAgLy8gICB1c2U6IHsgLi4uZGV2aWNlc1snaVBob25lIDEyJ10gfSxcbiAgICAvLyB9LFxuXG4gICAgLyogVGVzdCBhZ2FpbnN0IGJyYW5kZWQgYnJvd3NlcnMuICovXG4gICAgLy8ge1xuICAgIC8vICAgbmFtZTogJ01pY3Jvc29mdCBFZGdlJyxcbiAgICAvLyAgIHVzZTogeyAuLi5kZXZpY2VzWydEZXNrdG9wIEVkZ2UnXSwgY2hhbm5lbDogJ21zZWRnZScgfSxcbiAgICAvLyB9LFxuICAgIC8vIHtcbiAgICAvLyAgIG5hbWU6ICdHb29nbGUgQ2hyb21lJyxcbiAgICAvLyAgIHVzZTogeyAuLi5kZXZpY2VzWydEZXNrdG9wIENocm9tZSddLCBjaGFubmVsOiAnY2hyb21lJyB9LFxuICAgIC8vIH0sXG4gIF0sXG5cbiAgLyogUnVuIHlvdXIgbG9jYWwgZGV2IHNlcnZlciBiZWZvcmUgc3RhcnRpbmcgdGhlIHRlc3RzICovXG4gIC8vIHdlYlNlcnZlcjoge1xuICAvLyAgIGNvbW1hbmQ6ICducG0gcnVuIHN0YXJ0JyxcbiAgLy8gICB1cmw6ICdodHRwOi8vMTI3LjAuMC4xOjMwMDAnLFxuICAvLyAgIHJldXNlRXhpc3RpbmdTZXJ2ZXI6ICFwcm9jZXNzLmVudi5DSSxcbiAgLy8gfSxcbn0pO1xuXG4iXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQSxNQUFNO0VBQUVBLFlBQVk7RUFBRUM7QUFBUSxDQUFDLEdBQUdDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQzs7QUFFN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQUMsTUFBTSxDQUFDQyxPQUFPLEdBQUdKLFlBQVksQ0FBQztFQUM1QkssT0FBTyxFQUFFLFNBQVM7RUFDbEI7RUFDQUMsYUFBYSxFQUFFLElBQUk7RUFDbkI7RUFDQUMsVUFBVSxFQUFFLENBQUMsQ0FBQ0MsT0FBTyxDQUFDQyxHQUFHLENBQUNDLEVBQUU7RUFDNUI7RUFDQUMsT0FBTyxFQUFFSCxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDO0VBQy9CO0VBQ0FFLE9BQU8sRUFBRUosT0FBTyxDQUFDQyxHQUFHLENBQUNDLEVBQUUsR0FBRyxDQUFDLEdBQUdHLFNBQVM7RUFDdkM7RUFDQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLG1CQUFtQixDQUFDLENBQUM7RUFDM0M7RUFDQUMsR0FBRyxFQUFFO0lBQ0g7SUFDQTs7SUFFQTtJQUNBQyxLQUFLLEVBQUU7RUFFVCxDQUFDO0VBRUQ7RUFDQUMsUUFBUSxFQUFFLENBQ1I7SUFDRUMsSUFBSSxFQUFFLFFBQVE7SUFDZEgsR0FBRyxFQUFFO01BQUMsR0FBR2QsT0FBTyxDQUFDLGdCQUFnQixDQUFDO01BQUNrQixlQUFlLEVBQUU7SUFBSztFQUMzRDtFQUNBO0VBQ0E7RUFDQTtFQUNBOztFQUVBO0VBQ0E7RUFDQTtFQUNBOztFQUVBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTs7RUFFQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFBQTs7RUFHRjtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7QUFDRixDQUFDLENBQUMifQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMmJyanE2MWZ3cSIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJlbmQiLCJmbk1hcCIsImJyYW5jaE1hcCIsImxvYyIsInR5cGUiLCJsb2NhdGlvbnMiLCJzIiwiZiIsImIiLCJpbnB1dFNvdXJjZU1hcCIsInZlcnNpb24iLCJuYW1lcyIsInNvdXJjZXMiLCJzb3VyY2VzQ29udGVudCIsIm1hcHBpbmdzIiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSIsImRlZmluZUNvbmZpZyIsImRldmljZXMiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsInRlc3REaXIiLCJmdWxseVBhcmFsbGVsIiwiZm9yYmlkT25seSIsInByb2Nlc3MiLCJlbnYiLCJDSSIsInJldHJpZXMiLCJ3b3JrZXJzIiwidW5kZWZpbmVkIiwicmVwb3J0ZXIiLCJ1c2UiLCJ0cmFjZSIsInByb2plY3RzIiwibmFtZSIsImFjY2VwdERvd25sb2FkcyJdLCJzb3VyY2VzIjpbInBsYXl3cmlnaHQuY29uZmlnLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEB0cy1jaGVja1xuY29uc3QgeyBkZWZpbmVDb25maWcsIGRldmljZXMgfSA9IHJlcXVpcmUoJ0BwbGF5d3JpZ2h0L3Rlc3QnKTtcblxuLyoqXG4gKiBSZWFkIGVudmlyb25tZW50IHZhcmlhYmxlcyBmcm9tIGZpbGUuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbW90ZG90bGEvZG90ZW52XG4gKi9cbi8vIHJlcXVpcmUoJ2RvdGVudicpLmNvbmZpZygpO1xuXG4vKipcbiAqIEBzZWUgaHR0cHM6Ly9wbGF5d3JpZ2h0LmRldi9kb2NzL3Rlc3QtY29uZmlndXJhdGlvblxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmluZUNvbmZpZyh7XG4gIHRlc3REaXI6ICcuL3Rlc3RzJyxcbiAgLyogUnVuIHRlc3RzIGluIGZpbGVzIGluIHBhcmFsbGVsICovXG4gIGZ1bGx5UGFyYWxsZWw6IHRydWUsXG4gIC8qIEZhaWwgdGhlIGJ1aWxkIG9uIENJIGlmIHlvdSBhY2NpZGVudGFsbHkgbGVmdCB0ZXN0Lm9ubHkgaW4gdGhlIHNvdXJjZSBjb2RlLiAqL1xuICBmb3JiaWRPbmx5OiAhIXByb2Nlc3MuZW52LkNJLFxuICAvKiBSZXRyeSBvbiBDSSBvbmx5ICovXG4gIHJldHJpZXM6IHByb2Nlc3MuZW52LkNJID8gMiA6IDAsXG4gIC8qIE9wdCBvdXQgb2YgcGFyYWxsZWwgdGVzdHMgb24gQ0kuICovXG4gIHdvcmtlcnM6IHByb2Nlc3MuZW52LkNJID8gMSA6IHVuZGVmaW5lZCxcbiAgLyogUmVwb3J0ZXIgdG8gdXNlLiBTZWUgaHR0cHM6Ly9wbGF5d3JpZ2h0LmRldi9kb2NzL3Rlc3QtcmVwb3J0ZXJzICovXG4gIHJlcG9ydGVyOiBbW1wibGluZVwiXSwgW1wiYWxsdXJlLXBsYXl3cmlnaHRcIl1dLFxuICAvKiBTaGFyZWQgc2V0dGluZ3MgZm9yIGFsbCB0aGUgcHJvamVjdHMgYmVsb3cuIFNlZSBodHRwczovL3BsYXl3cmlnaHQuZGV2L2RvY3MvYXBpL2NsYXNzLXRlc3RvcHRpb25zLiAqL1xuICB1c2U6IHtcbiAgICAvKiBCYXNlIFVSTCB0byB1c2UgaW4gYWN0aW9ucyBsaWtlIGBhd2FpdCBwYWdlLmdvdG8oJy8nKWAuICovXG4gICAgLy8gYmFzZVVSTDogJ2h0dHA6Ly8xMjcuMC4wLjE6MzAwMCcsXG5cbiAgICAvKiBDb2xsZWN0IHRyYWNlIHdoZW4gcmV0cnlpbmcgdGhlIGZhaWxlZCB0ZXN0LiBTZWUgaHR0cHM6Ly9wbGF5d3JpZ2h0LmRldi9kb2NzL3RyYWNlLXZpZXdlciAqL1xuICAgIHRyYWNlOiAnb24tZmlyc3QtcmV0cnknLFxuXG4gIH0sXG5cbiAgLyogQ29uZmlndXJlIHByb2plY3RzIGZvciBtYWpvciBicm93c2VycyAqL1xuICBwcm9qZWN0czogW1xuICAgIHtcbiAgICAgIG5hbWU6ICdjaHJvbWUnLFxuICAgICAgdXNlOiB7Li4uZGV2aWNlc1snRGVza3RvcCBDaHJvbWUnXSxhY2NlcHREb3dubG9hZHM6IHRydWUgfSxcbiAgICB9LFxuICAgIC8vIHtcbiAgICAvLyAgIG5hbWU6IFwiZmlyZWZveFwiLFxuICAgIC8vICAgdXNlOiB7IC4uLmRldmljZXNbXCJEZXNrdG9wIEZpcmVmb3hcIl0gfSxcbiAgICAvLyB9XG5cbiAgICAvLyB7XG4gICAgLy8gICBuYW1lOiAnd2Via2l0JyxcbiAgICAvLyAgIHVzZTogeyAuLi5kZXZpY2VzWydEZXNrdG9wIFNhZmFyaSddIH0sXG4gICAgLy8gfSxcblxuICAgIC8qIFRlc3QgYWdhaW5zdCBtb2JpbGUgdmlld3BvcnRzLiAqL1xuICAgIC8vIHtcbiAgICAvLyAgIG5hbWU6ICdNb2JpbGUgQ2hyb21lJyxcbiAgICAvLyAgIHVzZTogeyAuLi5kZXZpY2VzWydQaXhlbCA1J10gfSxcbiAgICAvLyB9LFxuICAgIC8vIHtcbiAgICAvLyAgIG5hbWU6ICdNb2JpbGUgU2FmYXJpJyxcbiAgICAvLyAgIHVzZTogeyAuLi5kZXZpY2VzWydpUGhvbmUgMTInXSB9LFxuICAgIC8vIH0sXG5cbiAgICAvKiBUZXN0IGFnYWluc3QgYnJhbmRlZCBicm93c2Vycy4gKi9cbiAgICAvLyB7XG4gICAgLy8gICBuYW1lOiAnTWljcm9zb2Z0IEVkZ2UnLFxuICAgIC8vICAgdXNlOiB7IC4uLmRldmljZXNbJ0Rlc2t0b3AgRWRnZSddLCBjaGFubmVsOiAnbXNlZGdlJyB9LFxuICAgIC8vIH0sXG4gICAgLy8ge1xuICAgIC8vICAgbmFtZTogJ0dvb2dsZSBDaHJvbWUnLFxuICAgIC8vICAgdXNlOiB7IC4uLmRldmljZXNbJ0Rlc2t0b3AgQ2hyb21lJ10sIGNoYW5uZWw6ICdjaHJvbWUnIH0sXG4gICAgLy8gfSxcbiAgXSxcblxuICAvKiBSdW4geW91ciBsb2NhbCBkZXYgc2VydmVyIGJlZm9yZSBzdGFydGluZyB0aGUgdGVzdHMgKi9cbiAgLy8gd2ViU2VydmVyOiB7XG4gIC8vICAgY29tbWFuZDogJ25wbSBydW4gc3RhcnQnLFxuICAvLyAgIHVybDogJ2h0dHA6Ly8xMjcuMC4wLjE6MzAwMCcsXG4gIC8vICAgcmV1c2VFeGlzdGluZ1NlcnZlcjogIXByb2Nlc3MuZW52LkNJLFxuICAvLyB9LFxufSk7XG5cbiJdLCJtYXBwaW5ncyI6ImFBQUE7QUFBQSxTQUFBQSxlQUFBLE1BQUFDLElBQUEsZ0lBQUFDLElBQUEsZ0RBQUFDLE1BQUEsS0FBQUMsUUFBQSxzQkFBQUMsR0FBQSxvQkFBQUMsWUFBQSxFQUFBTCxJQUFBLDRIQUFBTSxZQUFBLE9BQUFDLEtBQUEsRUFBQUMsSUFBQSxHQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxHQUFBQyxNQUFBLFdBQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLElBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLE1BQUFFLEtBQUEsSUFBQUMsU0FBQSxPQUFBQyxHQUFBLEVBQUFOLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLE1BQUFLLElBQUEsYUFBQUMsU0FBQSxHQUFBUixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxLQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxPQUFBRixLQUFBLEVBQUFDLElBQUEsSUFBQUMsTUFBQSxLQUFBQyxHQUFBLEVBQUFGLElBQUEsSUFBQUMsTUFBQSxPQUFBRCxJQUFBLFVBQUFLLEdBQUEsRUFBQU4sS0FBQSxFQUFBQyxJQUFBLElBQUFDLE1BQUEsS0FBQUMsR0FBQSxFQUFBRixJQUFBLElBQUFDLE1BQUEsTUFBQUssSUFBQSxhQUFBQyxTQUFBLEdBQUFSLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLE9BQUFGLEtBQUEsRUFBQUMsSUFBQSxJQUFBQyxNQUFBLEtBQUFDLEdBQUEsRUFBQUYsSUFBQSxJQUFBQyxNQUFBLE9BQUFELElBQUEsTUFBQVEsQ0FBQSxlQUFBQyxDQUFBLElBQUFDLENBQUEsdUJBQUFDLGNBQUEsRUFBQUMsT0FBQSxHQUFBQyxLQUFBLGtOQUFBQyxPQUFBLDBCQUFBQyxjQUFBLCt0RUFBQUMsUUFBQSxnMUJBQUFDLGVBQUEsNENBQUF4QixJQUFBLGlEQUFBeUIsUUFBQSxDQUFBeEIsTUFBQSxDQUFBRSxHQUFBLElBQUFGLE1BQUEsQ0FBQUUsR0FBQSxVQUFBc0IsUUFBQSxDQUFBMUIsSUFBQSxHQUFBMEIsUUFBQSxDQUFBMUIsSUFBQSxFQUFBQyxJQUFBLEdBQUFBLElBQUEsRUFBQXlCLFFBQUEsQ0FBQTFCLElBQUEsRUFBQUssWUFBQSxNQUFBc0IsY0FBQSxDQUFBRCxRQUFBLENBQUExQixJQUFBLEdBVUE7QUFBQUQsY0FBQSxTQUFBQSxDQUFBLFNBQUE0QixjQUFBLFdBQUFBLGNBQUEsRUFBQTVCLGNBQUEsR0FUQSxLQUFNLENBQUU2QixZQUFZLENBQUVDLE9BQVEsQ0FBQyxFQUFBOUIsY0FBQSxHQUFBaUIsQ0FBQSxNQUFHYyxPQUFPLENBQUMsa0JBQWtCLENBQUMsRUFFN0Q7QUFDQTtBQUNBO0FBQ0EsR0FIQSxDQUlBO0FBRUE7QUFDQTtBQUNBLEdBRkEvQixjQUFBLEdBQUFpQixDQUFBLE1BR0FlLE1BQU0sQ0FBQ0MsT0FBTyxDQUFHSixZQUFZLENBQUMsQ0FDNUJLLE9BQU8sQ0FBRSxTQUFTLENBQ2xCLG9DQUNBQyxhQUFhLENBQUUsSUFBSSxDQUNuQixpRkFDQUMsVUFBVSxDQUFFLENBQUMsQ0FBQ0MsT0FBTyxDQUFDQyxHQUFHLENBQUNDLEVBQUUsQ0FDNUIsc0JBQ0FDLE9BQU8sQ0FBRUgsT0FBTyxDQUFDQyxHQUFHLENBQUNDLEVBQUUsRUFBQXZDLGNBQUEsR0FBQW1CLENBQUEsU0FBRyxDQUFDLEdBQUFuQixjQUFBLEdBQUFtQixDQUFBLFNBQUcsQ0FBQyxFQUMvQixzQ0FDQXNCLE9BQU8sQ0FBRUosT0FBTyxDQUFDQyxHQUFHLENBQUNDLEVBQUUsRUFBQXZDLGNBQUEsR0FBQW1CLENBQUEsU0FBRyxDQUFDLEdBQUFuQixjQUFBLEdBQUFtQixDQUFBLFNBQUd1QixTQUFTLEVBQ3ZDLHFFQUNBQyxRQUFRLENBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFFLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUMzQyx3R0FDQUMsR0FBRyxDQUFFLENBQ0gsOERBQ0E7QUFFQSwrRkFDQUMsS0FBSyxDQUFFLGdCQUVULENBQUMsQ0FFRCwyQ0FDQUMsUUFBUSxDQUFFLENBQ1IsQ0FDRUMsSUFBSSxDQUFFLFFBQVEsQ0FDZEgsR0FBRyxDQUFFLENBQUMsR0FBR2QsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUNrQixlQUFlLENBQUUsSUFBSyxDQUMzRCxDQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQSxxQ0FDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEscUNBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBLENBR0YsMERBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNGLENBQUMsQ0FBQyxDIn0=